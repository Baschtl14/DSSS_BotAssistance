!pip install python-telegram-bot transformers torch flask ngrok

!pip install pyngrok --upgrade
!ngrok authtoken ...


from pyngrok import ngrok

public_url = ngrok.connect(5000)
print("Your public ngrok URL is:", public_url)


import nest_asyncio
import asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import requests


TELEGRAM_BOT_TOKEN = ''
NGROK_URL = ''  

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('Hello! I am your AI assistant. Ask me anything!')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    try:

        response = requests.post(f'{NGROK_URL}/infer', json={'text': user_text})
        
        print(f"Raw Response: {response.text}")
        
        if response.status_code == 200:  # Check if the request was successful
            bot_reply = response.json().get('response', 'Sorry, I could not process your request.')
        else:
            bot_reply = f"Server error: {response.status_code}"
    except requests.exceptions.RequestException as e:
      
        bot_reply = f"Network error: {str(e)}"
    except ValueError:
    
        bot_reply = "Sorry, the server returned an invalid response."

    await update.message.reply_text(bot_reply)


async def main():
   
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
 
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
  
    async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"Exception: {context.error}")
    
    application.add_error_handler(error_handler)
    
    print("Starting bot...")
    await application.run_polling()


nest_asyncio.apply()


asyncio.run(main())
